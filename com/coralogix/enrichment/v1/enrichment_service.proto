syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "com/coralogix/enrichment/v1/enrichment.proto";
import "com/coralogix/enrichment/v1/enrichment_request_model.proto";
import "com/coralogix/enrichment/v1/audit_log.proto";
import "com/coralogix/openapi/v1/annotations.proto";

package com.coralogix.enrichment.v1;

message GetEnrichmentLimitRequest {}

// The enrichment limit
message GetEnrichmentLimitResponse {
  // The limit of enrichments
  uint32 limit = 1 [(com.coralogix.openapi.v1.field) = { example: "10", required: true }];
  // The number of enrichments used
  uint32 used = 2 [(com.coralogix.openapi.v1.field) = { example: "5", required: true }];
}

message GetEnrichmentsRequest {}

// The enrichments collection
message GetEnrichmentsResponse {
  option (com.coralogix.openapi.v1.message) = {
    name: "EntrichmentCollection"
  };

  // The enrichments
  repeated Enrichment enrichments = 1 [(com.coralogix.openapi.v1.field) = { required: true }];
}

// Add list of enrichments
message AddEnrichmentsRequest {
  // The enrichments to add
  repeated EnrichmentRequestModel request_enrichments = 1 [(com.coralogix.openapi.v1.field) = { required: true, name: "enrichments" }];
}

// The enrichments added
message AddEnrichmentsResponse {
  // The enrichments added
  repeated Enrichment enrichments = 1 [(com.coralogix.openapi.v1.field) = { required: true }];
}

// Remove list of enrichments
message RemoveEnrichmentsRequest {
  // The enrichments to remove
  repeated google.protobuf.UInt32Value enrichment_ids = 1 [(com.coralogix.openapi.v1.field) = { example: "[1, 2, 3]", required: true }];
}

// The enrichments removed
message RemoveEnrichmentsResponse {
  // The enrichments removed
  repeated Enrichment remaining_enrichments = 1 [(com.coralogix.openapi.v1.field) = { skip_in: [CLOUD_IBM] }];
}

service EnrichmentService {
  option (com.coralogix.openapi.v1.service) = {
    name: "Enrichments"
    description: "Create and manage enrichments"
    resource_name: "Enrichment"
  };

  rpc GetEnrichments(GetEnrichmentsRequest) returns (GetEnrichmentsResponse) {
    option (audit_log_description).description = "Get enrichments";
    option (google.api.http) = {
      get: "/v1/enrichments"
    };
    option (com.coralogix.openapi.v1.method) = {
      datasource: true
      description: "List all enrichments"
      response_body_example: "{\"enrichments\":[{\"id\":3,\"field_name\":\"ip\",\"enrichment_type\":{\"geo_ip\":{}}},{\"id\":6,\"field_name\":\"client_ip\",\"enrichment_type\":{\"geo_ip\":{}}},{\"id\":23,\"field_name\":\"client_ip\",\"enrichment_type\":{\"suspicious_ip\":{}}},{\"id\":24,\"field_name\":\"phone_code\",\"enrichment_type\":{\"custom_enrichment\":{\"id\":17}}}]}"
    };
  };
  rpc AddEnrichments(AddEnrichmentsRequest) returns (AddEnrichmentsResponse) {
    option (audit_log_description).description = "Add enrichments";
    option (google.api.http) = {
      post: "/v1/enrichments"
      body: "*"
    };
    option (com.coralogix.openapi.v1.method) = {
      description: "Batch create enrichments"
      request_body_example: "{\"enrichments\":[{\"field_name\":\"ip\",\"enrichment_type\":{\"geo_ip\":{}}},{\"field_name\":\"client_ip\",\"enrichment_type\":{\"geo_ip\":{}}}]}"
      response_body_example: "{\"enrichments\":[{\"id\":3,\"field_name\":\"ip\",\"enrichment_type\":{\"geo_ip\":{}}},{\"id\":6,\"field_name\":\"client_ip\",\"enrichment_type\":{\"geo_ip\":{}}}]}"
    };
  };
  rpc RemoveEnrichments(RemoveEnrichmentsRequest) returns (RemoveEnrichmentsResponse) {
    option (audit_log_description).description = "Delete enrichments";
    option (google.api.http) = {
      delete: "/v1/enrichments/{enrichment_ids}"
    };
    option (com.coralogix.openapi.v1.method) = {
      description: "Delete enrichments"
      path_parameter_name: "id"
    };
  };
  rpc GetEnrichmentLimit(GetEnrichmentLimitRequest) returns (GetEnrichmentLimitResponse) {
    option (audit_log_description).description = "Get enrichments limit";
    option (google.api.http) = {
      get: "/v1/enrichments/limit"
    };
  };
}